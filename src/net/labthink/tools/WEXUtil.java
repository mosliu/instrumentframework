/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.labthink.tools;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.labthink.instrument.device.UITester;
import net.labthink.instrument.device.intelligent.ZigbeeSettings.ZigbeeSettingsPacket;
import net.labthink.instrument.device.intelligent.ZigbeeSettings.ZigbeeStatus;
import net.labthink.instrument.device.intelligent.ZigbeeSettings.codec.ZigbeeSettingsProtocolCodecFactory;
import net.labthink.instrument.device.intelligent.ZigbeeSettings.handler.ZigbeeSettingsHandler;
import net.labthink.instrument.rs232.RS232Connector;
import net.labthink.utils.GUIPrintStream;
import org.apache.mina.core.RuntimeIoException;
import org.apache.mina.core.future.WriteFuture;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFactory;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.serial.SerialAddress;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Moses
 */
public class WEXUtil extends javax.swing.JFrame {

    private static final org.slf4j.Logger log = LoggerFactory.getLogger(WEXUtil.class);
    /**
     * Creates new form WEXUtil
     */
    public WEXUtil() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_comportset = new javax.swing.JPanel();
        jLabel_ComPort = new javax.swing.JLabel();
        jComboBox_ComPort = new javax.swing.JComboBox();
        jLabel_BaudRate = new javax.swing.JLabel();
        jComboBox_BaudRate = new javax.swing.JComboBox();
        jToggleButton_startStopAction = new javax.swing.JToggleButton();
        jButton_emptyoutput = new javax.swing.JButton();
        jPanel_output = new javax.swing.JPanel();
        jScrollPane_output = new javax.swing.JScrollPane();
        jTextArea_output = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel_normal = new javax.swing.JPanel();
        jPanel_CommSetting = new javax.swing.JPanel();
        jLabel_BaudRateSet = new javax.swing.JLabel();
        jComboBox_BaudRateSet = new javax.swing.JComboBox();
        jLabel_ParitySet = new javax.swing.JLabel();
        jComboBox_ParitySet = new javax.swing.JComboBox();
        jLabel_FlowcontrolSet = new javax.swing.JLabel();
        jComboBox_FlowcontrolSet = new javax.swing.JComboBox();
        jButton_comm_write = new javax.swing.JButton();
        jButton_TestConnection = new javax.swing.JButton();
        jLabel_version = new javax.swing.JLabel();
        jPanel_common = new javax.swing.JPanel();
        jComboBox_Channel = new javax.swing.JComboBox();
        jLabel_Channel = new javax.swing.JLabel();
        jComboBox_Power = new javax.swing.JComboBox();
        jLabel_Power = new javax.swing.JLabel();
        jComboBox_Topology = new javax.swing.JComboBox();
        jLabel_Topology = new javax.swing.JLabel();
        jButton_common_write = new javax.swing.JButton();
        jButton_common_read = new javax.swing.JButton();
        jComboBox_NodeType = new javax.swing.JComboBox();
        jLabel_NodeType = new javax.swing.JLabel();
        jLabel_NodeId = new javax.swing.JLabel();
        jFormattedTextField_NodeId = new javax.swing.JFormattedTextField();
        jFormattedTextField_NetId = new javax.swing.JFormattedTextField();
        jLabel_NetId = new javax.swing.JLabel();
        jLabel_Bootloader = new javax.swing.JLabel();
        jComboBox_Bootloader = new javax.swing.JComboBox();
        jLabel_EnableIO = new javax.swing.JLabel();
        jComboBox_EnableIO = new javax.swing.JComboBox();
        jPanel_advance = new javax.swing.JPanel();
        jPasswordField_pass = new javax.swing.JPasswordField();
        jLabel_pass = new javax.swing.JLabel();
        jButton_ResetZigbee = new javax.swing.JButton();
        jButton_ExitTransMode = new javax.swing.JButton();
        jLabel_TransModeAddr = new javax.swing.JLabel();
        jFormattedTextField_TransModeAddr = new javax.swing.JFormattedTextField();
        jButton_EnterTransMode = new javax.swing.JButton();
        jLabel_TestRoute = new javax.swing.JLabel();
        jFormattedTextField_TestRoute = new javax.swing.JFormattedTextField();
        jButton_TestRoute = new javax.swing.JButton();
        jButton_TestRouteRSSI = new javax.swing.JButton();
        jLabel_SendText = new javax.swing.JLabel();
        jFormattedTextField_SendTextDest = new javax.swing.JFormattedTextField();
        jTextField_SendText = new javax.swing.JTextField();
        jButton_SendText = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel_comportset.setBorder(javax.swing.BorderFactory.createTitledBorder("串口设置"));

        jLabel_ComPort.setText("端口设置");

        jComboBox_ComPort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12", "COM13", "COM14", "COM15", "COM16", "COM17", "COM18", "COM19", "COM20", "COM21", "COM22", "COM23", "COM24", "COM25", "COM26", "COM27", "COM28", "COM29", "COM30", "COM31", "COM32" }));
        jComboBox_ComPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ComPortActionPerformed(evt);
            }
        });

        jLabel_BaudRate.setText("速率");

        jComboBox_BaudRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "110", "300", "600", "1200", "2400", "4800", "9600", "14400", "19200", "38400", "43000", "56000", "57600", "115200" }));
        jComboBox_BaudRate.setSelectedIndex(13);

        jToggleButton_startStopAction.setText("开始");
        jToggleButton_startStopAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_startStopActionActionPerformed(evt);
            }
        });

        jButton_emptyoutput.setText("清空");
        jButton_emptyoutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_emptyoutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_comportsetLayout = new javax.swing.GroupLayout(jPanel_comportset);
        jPanel_comportset.setLayout(jPanel_comportsetLayout);
        jPanel_comportsetLayout.setHorizontalGroup(
            jPanel_comportsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_comportsetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_ComPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox_ComPort, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_BaudRate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox_BaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_emptyoutput, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton_startStopAction, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel_comportsetLayout.setVerticalGroup(
            jPanel_comportsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_comportsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel_BaudRate)
                .addComponent(jComboBox_BaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jToggleButton_startStopAction)
                .addComponent(jButton_emptyoutput))
            .addGroup(jPanel_comportsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel_ComPort)
                .addComponent(jComboBox_ComPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel_output.setBorder(javax.swing.BorderFactory.createTitledBorder("信息输出区"));

        jTextArea_output.setColumns(20);
        jTextArea_output.setRows(5);
        jScrollPane_output.setViewportView(jTextArea_output);

        javax.swing.GroupLayout jPanel_outputLayout = new javax.swing.GroupLayout(jPanel_output);
        jPanel_output.setLayout(jPanel_outputLayout);
        jPanel_outputLayout.setHorizontalGroup(
            jPanel_outputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_output, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel_outputLayout.setVerticalGroup(
            jPanel_outputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_output, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );

        jPanel_CommSetting.setBorder(javax.swing.BorderFactory.createTitledBorder("Comm Settings"));

        jLabel_BaudRateSet.setText("BaudRate：");

        jComboBox_BaudRateSet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "115200", "57600", "38400", "19200", "9600", "4800", "2400", "1200", "28800", "600" }));
        jComboBox_BaudRateSet.setSelectedIndex(2);

        jLabel_ParitySet.setText("Parity：");

        jComboBox_ParitySet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "none", "odd", "even", "mark", "space" }));
        jComboBox_ParitySet.setEnabled(false);

        jLabel_FlowcontrolSet.setText("FlowControl：");

        jComboBox_FlowcontrolSet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "false", "true" }));
        jComboBox_FlowcontrolSet.setEnabled(false);

        jButton_comm_write.setText("write");
        jButton_comm_write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_comm_writeActionPerformed(evt);
            }
        });

        jButton_TestConnection.setText("TestConnection");
        jButton_TestConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_TestConnectionActionPerformed(evt);
            }
        });

        jLabel_version.setText("Version：尚未连接");

        javax.swing.GroupLayout jPanel_CommSettingLayout = new javax.swing.GroupLayout(jPanel_CommSetting);
        jPanel_CommSetting.setLayout(jPanel_CommSettingLayout);
        jPanel_CommSettingLayout.setHorizontalGroup(
            jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_CommSettingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_CommSettingLayout.createSequentialGroup()
                        .addComponent(jLabel_FlowcontrolSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_FlowcontrolSet, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel_version, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_ParitySet, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_BaudRateSet, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox_BaudRateSet, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_ParitySet, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_TestConnection, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_comm_write, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel_CommSettingLayout.setVerticalGroup(
            jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_CommSettingLayout.createSequentialGroup()
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_TestConnection)
                    .addComponent(jLabel_version, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_FlowcontrolSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_FlowcontrolSet)
                    .addComponent(jButton_comm_write)))
            .addGroup(jPanel_CommSettingLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_BaudRateSet)
                        .addComponent(jComboBox_BaudRateSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_CommSettingLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel_CommSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox_ParitySet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_ParitySet)))))
        );

        jPanel_common.setBorder(javax.swing.BorderFactory.createTitledBorder("CommonSettings"));

        jComboBox_Channel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "11(2.405GHZ)", "12(2.410GHZ)", "13(2.415GHZ)", "14(2.420GHZ)", "15(2.425GHZ)", "16(2.430GHZ)", "17(2.435GHZ)", "18(2.440GHZ)", "19(2.445GHZ)", "20(2.450GHZ)", "21(2.455GHZ)", "22(2.460GHZ)", "23(2.465GHZ)", "24(2.470GHZ)", "25(2.475GHZ)", "26(2.480GHZ)" }));

        jLabel_Channel.setText("Channel：");

        jComboBox_Power.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0: 0 dBm ", "1: -1 dBm ", "2: -3 dBm ", "3: -5 dBm ", "4: -7 dBm ", "5: -10 dBm", "6: -15 dBm", "7: -25 dBm" }));

        jLabel_Power.setText("Power：");

        jComboBox_Topology.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mesh", "Star", "Linear AODV" }));

        jLabel_Topology.setText("Topology：");

        jButton_common_write.setText("write");
        jButton_common_write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_common_writeActionPerformed(evt);
            }
        });

        jButton_common_read.setText("read");
        jButton_common_read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_common_readActionPerformed(evt);
            }
        });

        jComboBox_NodeType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Master", "Client", "Tag" }));
        jComboBox_NodeType.setSelectedIndex(1);

        jLabel_NodeType.setText("Node Type：");

        jLabel_NodeId.setText("Node ID：");

        jFormattedTextField_NodeId.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_NodeId.setText("20000");

        jFormattedTextField_NetId.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_NetId.setText("0");

        jLabel_NetId.setText("Net ID：");

        jLabel_Bootloader.setText("Bootloader：");

        jComboBox_Bootloader.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enable", "Disable" }));
        jComboBox_Bootloader.setSelectedIndex(1);

        jLabel_EnableIO.setText("EnableIO：");

        jComboBox_EnableIO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Yes" }));
        jComboBox_EnableIO.setSelectedIndex(1);

        javax.swing.GroupLayout jPanel_commonLayout = new javax.swing.GroupLayout(jPanel_common);
        jPanel_common.setLayout(jPanel_commonLayout);
        jPanel_commonLayout.setHorizontalGroup(
            jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_commonLayout.createSequentialGroup()
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_commonLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Channel)
                            .addComponent(jLabel_Power))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_Power, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_Channel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel_commonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel_NetId))
                    .addGroup(jPanel_commonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jFormattedTextField_NetId, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_commonLayout.createSequentialGroup()
                                .addComponent(jLabel_NodeId)
                                .addGap(18, 18, 18)
                                .addComponent(jFormattedTextField_NodeId, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Topology, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_NodeType, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_Bootloader, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_EnableIO, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_commonLayout.createSequentialGroup()
                        .addComponent(jComboBox_EnableIO, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(jButton_common_write))
                    .addGroup(jPanel_commonLayout.createSequentialGroup()
                        .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_Bootloader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_Topology, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_NodeType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_common_read, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel_commonLayout.setVerticalGroup(
            jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_commonLayout.createSequentialGroup()
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Channel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Channel)
                    .addComponent(jLabel_Topology)
                    .addComponent(jComboBox_Topology, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Power, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Power)
                    .addComponent(jLabel_NodeType)
                    .addComponent(jComboBox_NodeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_common_write)
                .addContainerGap())
            .addGroup(jPanel_commonLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_NetId)
                        .addComponent(jFormattedTextField_NetId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_Bootloader)
                        .addComponent(jComboBox_Bootloader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_common_read)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_EnableIO)
                        .addComponent(jComboBox_EnableIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_commonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_NodeId)
                        .addComponent(jFormattedTextField_NodeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_normalLayout = new javax.swing.GroupLayout(jPanel_normal);
        jPanel_normal.setLayout(jPanel_normalLayout);
        jPanel_normalLayout.setHorizontalGroup(
            jPanel_normalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_common, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel_normalLayout.createSequentialGroup()
                .addComponent(jPanel_CommSetting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_normalLayout.setVerticalGroup(
            jPanel_normalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_normalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_CommSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_common, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("串口Zigbee设置工具", jPanel_normal);

        jLabel_pass.setText("Password：");

        jButton_ResetZigbee.setText("ResetZigbee");
        jButton_ResetZigbee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ResetZigbeeActionPerformed(evt);
            }
        });

        jButton_ExitTransMode.setText("ExitTransMode");
        jButton_ExitTransMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExitTransModeActionPerformed(evt);
            }
        });

        jLabel_TransModeAddr.setText("TransMode Addr：");

        jFormattedTextField_TransModeAddr.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_TransModeAddr.setText("100");

        jButton_EnterTransMode.setText("EnterTransMode");
        jButton_EnterTransMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EnterTransModeActionPerformed(evt);
            }
        });

        jLabel_TestRoute.setText("TestRoute：");

        jFormattedTextField_TestRoute.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_TestRoute.setText("100");

        jButton_TestRoute.setText("TestRoute");
        jButton_TestRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_TestRouteActionPerformed(evt);
            }
        });

        jButton_TestRouteRSSI.setText("TestRouteRSSI");
        jButton_TestRouteRSSI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_TestRouteRSSIActionPerformed(evt);
            }
        });

        jLabel_SendText.setText("SendText：");

        jFormattedTextField_SendTextDest.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_SendTextDest.setText("100");

        jTextField_SendText.setText("text");

        jButton_SendText.setText("SendText");
        jButton_SendText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SendTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_advanceLayout = new javax.swing.GroupLayout(jPanel_advance);
        jPanel_advance.setLayout(jPanel_advanceLayout);
        jPanel_advanceLayout.setHorizontalGroup(
            jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_advanceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_advanceLayout.createSequentialGroup()
                        .addComponent(jLabel_pass)
                        .addGap(25, 25, 25)
                        .addComponent(jPasswordField_pass, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_ResetZigbee, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_advanceLayout.createSequentialGroup()
                        .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_TestRoute)
                            .addComponent(jLabel_TransModeAddr)
                            .addComponent(jLabel_SendText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_advanceLayout.createSequentialGroup()
                                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jFormattedTextField_TransModeAddr)
                                    .addComponent(jFormattedTextField_TestRoute)
                                    .addComponent(jFormattedTextField_SendTextDest, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton_EnterTransMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_TestRoute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_SendText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_TestRouteRSSI, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton_ExitTransMode, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jTextField_SendText))))
                .addGap(136, 136, 136))
        );
        jPanel_advanceLayout.setVerticalGroup(
            jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_advanceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_pass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_ResetZigbee)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_TransModeAddr)
                    .addComponent(jFormattedTextField_TransModeAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_EnterTransMode)
                    .addComponent(jButton_ExitTransMode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_TestRoute)
                    .addComponent(jFormattedTextField_TestRoute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_TestRoute)
                    .addComponent(jButton_TestRouteRSSI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_advanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_SendText)
                    .addComponent(jFormattedTextField_SendTextDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_SendText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_SendText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("高级功能", jPanel_advance);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel_comportset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel_output, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_comportset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_ComPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ComPortActionPerformed
    }//GEN-LAST:event_jComboBox_ComPortActionPerformed

    private void jToggleButton_startStopActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_startStopActionActionPerformed
        if (zigbeestatus == null) {
            zigbeestatus = new ZigbeeStatus();
        }

        IoHandlerAdapter _handler = new ZigbeeSettingsHandler(this);
        ProtocolCodecFactory _pcf = new ZigbeeSettingsProtocolCodecFactory();
        initReceiver(_handler, _pcf);

        if (jToggleButton_startStopAction.isSelected()) {
            try {
                receiver.startListen();
            } catch (RuntimeIoException e) {
                System.out.println("串口打开失败");
                return;

            }
            System.out.println("当前版本0.0.1");
            final IoSession session = receiver.getReceiverSession();
            if (slowsender == null) {
                slowsender = new SlowSender(session);
            }
            if (slowsender.endflag == true) {
                slowsender.endflag = false;
                slowsender.session = session;
            }
//            if (th_ss != null) {
//                System.out.println("thread id:" + th_ss.getId());
//                System.out.println("thread name:" + th_ss.getName());
//                System.out.println("thread state:" + th_ss.getState());
//            }
            th_ss = new Thread(slowsender, "slowsender");
            th_ss.start();
//
//            if (th_ss != null) {
//                System.out.println("===========");
//                System.out.println("thread id:" + th_ss.getId());
//                System.out.println("thread name:" + th_ss.getName());
//                System.out.println("thread state:" + th_ss.getState());
//            }

            ZigbeeSettingsPacket.initstatic();;//初始化zigbee量
//        tt = new TimerTask() {
//            public void run() {
//                try {
//                    InfraredMessage pkt = new InfraredMessage();
//                    byte[] content = pkt.getContent();
//                    byte[] tmp = BytePlus.short2bytes(ppm);
//                    content[0] = tmp[0];
//                    content[1] = tmp[1];
//                    byte[] tmp2 = BytePlus.short2bytes(ppm2);
//                    content[2] = tmp2[0];
//                    content[3] = tmp2[1];
//                    pkt.setContent(content);
//
//                    WriteFuture wf = session.write(pkt);// 发送消息
//                    wf.awaitUninterruptibly();
//                    //                        Thread.sleep(sendspeed);
//
//                } catch (Exception ex) {
//                    Logger.getLogger(UILogger.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        };
//        timer.scheduleAtFixedRate(tt, 50, sendspeed);

            jToggleButton_startStopAction.setText("关闭");
        } else {
            if (slowsender != null) {
                slowsender.endthread();
                try {
                    th_ss.join();
                } catch (InterruptedException ex) {
                    Logger.getLogger(WEXUtil.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            receiver.endListen();
            disableSettings();

//            if (tt != null) {
//                tt.cancel();
//            }
//            //            timer.cancel();
//            timer.purge();
            zigbeestatus = null;
            jToggleButton_startStopAction.setText("开始");
        }
    }//GEN-LAST:event_jToggleButton_startStopActionActionPerformed

    private void jButton_TestConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TestConnectionActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        setVersion("连接不成功"); //指示是否成功
        //版本信息
        ZigbeeSettingsPacket pkt = ZigbeeSettingsPacket.getVersionPacket();
        IoSession session = receiver.getReceiverSession();
        //发送之前记录哪个槽发送
        //串口速率
        int regno = 0x8C;
        int waittime = 1000;
        sendRegisterPacket(pkt, regno, waittime, session);

        //串口速率
        regno = 0x65;//101
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        // this.wait(100);
        //校验位
        regno = 0x67;//103
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //流控
        regno = 0x6A;//106
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //工作模式：帧、AT、透传
        regno = 0xAD;//173
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);
//        //串口速率
//        pkt = ZigbeeSettingsPacket.getRegisterPacket(0x65);
//        wf = session.write(pkt);// 发送消息
//        wf.awaitUninterruptibly();


    }//GEN-LAST:event_jButton_TestConnectionActionPerformed

    private void jButton_comm_writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_comm_writeActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
//        jComboBox_BaudRate.setSelectedItem("9600");
//        jComboBox_BaudRateSet.setSelectedIndex(2);

        IoSession session = receiver.getReceiverSession();

        int regno = -1;
        int waittime = -1;
        int setvalue = -1;
        ZigbeeSettingsPacket pkt;

        //校验位
        regno = 0x67;//103
        waittime = 1000;
        setvalue = jComboBox_ParitySet.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);
        //流控
        regno = 0x6A;//106
        waittime = 1000;
        setvalue = jComboBox_FlowcontrolSet.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);
        //串口速率
        regno = 0x65;//101
        waittime = 1000;
        setvalue = jComboBox_BaudRateSet.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        pkt.setRestartFlag(true);
        sendRegisterPacketSlow(pkt, regno, waittime, session);
        jComboBox_BaudRate.setSelectedItem(jComboBox_BaudRateSet.getSelectedItem());

//        initReceiver(handler, new ZigbeeSettingsProtocolCodecFactory());    
//        receiver.startListen();
//        session = receiver.getReceiverSession();
    }//GEN-LAST:event_jButton_comm_writeActionPerformed

    private void jButton_emptyoutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_emptyoutputActionPerformed
        gpstream.clear();
        //        System.out.flush();
        //        System.out.close();
        jTextArea_output.setText("");
        //        System.setOut(new GUIPrintStream(System.out, ut.jTextArea_output));
    }//GEN-LAST:event_jButton_emptyoutputActionPerformed

    private void jButton_common_writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_common_writeActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
//        jComboBox_BaudRate.setSelectedItem("9600");
//        jComboBox_BaudRateSet.setSelectedIndex(2);

        IoSession session = receiver.getReceiverSession();

        int regno = -1;
        int waittime = -1;
        int setvalue = -1;
        ZigbeeSettingsPacket pkt;

        //power
        regno = 0x70;//112
        waittime = 1000;
        setvalue = jComboBox_Power.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //channel
        regno = 0x72;//114
        waittime = 1000;
        setvalue = jComboBox_Channel.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //Node Type
        regno = 0x96;//150
        waittime = 1000;
        setvalue = jComboBox_NodeType.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //jComboBox_Topology
        regno = 0xA0;//160
        waittime = 1000;
        setvalue = jComboBox_Topology.getSelectedIndex() + 0x61;//61,62,63 三种
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //NodeID_Upper_NetLayer
        regno = 0xBC;//188
        waittime = 1000;
        setvalue = getNodeId_Upper();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //NodeID_Lower_NetLayer
        regno = 0xBD;//188
        waittime = 1000;
        setvalue = getNodeId_Lower();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //NodeID_Upper_MAC
        regno = 0xC0;//192
        waittime = 1000;
        setvalue = getNodeId_Upper();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //NodeID_Lower_MAC
        regno = 0xC1;//193
        waittime = 1000;
        setvalue = getNodeId_Lower();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //NodeID_Upper_NETID
        regno = 0xBE;//190
        waittime = 1000;
        setvalue = getNetId_Upper();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //NodeID_Lower_NETID
        regno = 0xBF;//191
        waittime = 1000;
        setvalue = getNetId_Lower();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //Bootloader
        regno = 0xF6;//264
        waittime = 1000;
        setvalue = jComboBox_Bootloader.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //Bootloader
        regno = 0xE7;//231
        waittime = 1000;
        setvalue = jComboBox_EnableIO.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        sendRegisterPacketSlow(pkt, regno, waittime, session);

        //软启动
        setvalue = jComboBox_Bootloader.getSelectedIndex();
        pkt = ZigbeeSettingsPacket.getSoftRestartPacket();
        sendRegisterPacketSlow(pkt, 0x8F, 2000, session);


    }//GEN-LAST:event_jButton_common_writeActionPerformed

    private void jButton_common_readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_common_readActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();
        //发送之前记录哪个槽发送

        //发送power
        int regno = 0x70;//112
        int waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        // this.wait(100);
        //通道
        regno = 0x72;//114
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //NodeType
        regno = 0x96;//150
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //Topology
        regno = 0xA0;//160
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //NodeID_Upper
//        regno = 0xBC;//188
        regno = 0xC0;//192
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //NodeID_Lower
//        regno = 0xBD;//189
        regno = 0xC1;//193
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //NetID_Upper
        regno = 0xBE;//190
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //NetID_Lower
        regno = 0xBF;//191
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //Bootloader
        regno = 0xF6;//246
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

        //EnableIO
        regno = 0xE7;//231
        waittime = 1000;
        pkt = ZigbeeSettingsPacket.getRegisterPacket(regno);
        sendRegisterPacket(pkt, regno, waittime, session);

//        //串口速率
//        pkt = ZigbeeSettingsPacket.getRegisterPacket(0x65);
//        wf = session.write(pkt);// 发送消息
//        wf.awaitUninterruptibly();

    }//GEN-LAST:event_jButton_common_readActionPerformed

    private void jButton_ResetZigbeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ResetZigbeeActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        //密码不对不得使用
        if (!checkpassword()) {
            return;
        }
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();

        pkt = ZigbeeSettingsPacket.getResetFactoryPacket();
        pkt.setRestartFlag(true);
        sendRegisterPacketSlow(pkt, 0x90, 5000, session);
        this.jComboBox_BaudRate.setSelectedItem("38400");


    }//GEN-LAST:event_jButton_ResetZigbeeActionPerformed

    private void jButton_ExitTransModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExitTransModeActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        //密码不对不得使用
        if (!checkpassword()) {
            return;
        }
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();

        //退透传
        pkt = ZigbeeSettingsPacket.getExitTransprantPacket();
        WriteFuture wf;
        //发送之前记录哪个槽发送
        wf = session.write(pkt);// 发送消息
        wf.awaitUninterruptibly();
    }//GEN-LAST:event_jButton_ExitTransModeActionPerformed

    private void jButton_EnterTransModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EnterTransModeActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        //密码不对不得使用
        if (!checkpassword()) {
            return;
        }
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();

        int regno = -1;
        int waittime = -1;
        int setvalue = -1;

        //TransparentMode LoopBack Flag
        regno = 0xB0;//176
        waittime = 1000;
        setvalue = 0;
        pkt = ZigbeeSettingsPacket.getRegisterSetPacket(regno, setvalue);
        WriteFuture wf;
        //发送之前记录哪个槽发送
        ZigbeeSettingsPacket.setRegister(pkt.getPacketSlot(), regno, waittime);
        wf = session.write(pkt);// 发送消息
        wf.awaitUninterruptibly();
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(WEXUtil.class.getName()).log(Level.SEVERE, null, ex);
        }

        //进透传
        String addr = jFormattedTextField_TransModeAddr.getText();
        int dest = Integer.parseInt(addr);
        dest = dest % 65535;
        pkt = ZigbeeSettingsPacket.getEnterTransprantPacket(dest);
        //发送之前记录哪个槽发送
        wf = session.write(pkt);// 发送消息
        wf.awaitUninterruptibly();
    }//GEN-LAST:event_jButton_EnterTransModeActionPerformed

    private void jButton_TestRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TestRouteActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        //密码不对不得使用
        if (!checkpassword()) {
            return;
        }
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();

        int dest = Integer.parseInt(jFormattedTextField_TestRoute.getText());

        pkt = ZigbeeSettingsPacket.getRouteQueryPacket(dest);
        sendRegisterPacketSlow(pkt, 0xAA, 1000, session);
        //软启动
    }//GEN-LAST:event_jButton_TestRouteActionPerformed

    private void jButton_TestRouteRSSIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_TestRouteRSSIActionPerformed
        //如果未打开串口则不处理
        if (!checkserialport()) {
            return;
        }
        //密码不对不得使用
        if (!checkpassword()) {
            return;
        }
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();

        int dest = Integer.parseInt(jFormattedTextField_TestRoute.getText());

        pkt = ZigbeeSettingsPacket.getRouteQueryRSSIPacket(dest);
        sendRegisterPacketSlow(pkt, 0xBB, 1000, session);
        //软启动

    }//GEN-LAST:event_jButton_TestRouteRSSIActionPerformed

    private void jButton_SendTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SendTextActionPerformed
        int dest = Integer.parseInt(jFormattedTextField_SendTextDest.getText());
        String str = jTextField_SendText.getText();
        ZigbeeSettingsPacket pkt;
        IoSession session = receiver.getReceiverSession();

        pkt = ZigbeeSettingsPacket.getSendTextPacket(dest, str);
        sendRegisterPacketSlow(pkt, 0xFF, 5000, session);
    }//GEN-LAST:event_jButton_SendTextActionPerformed

    private boolean checkserialport() {
        if (jToggleButton_startStopAction.isSelected()) {
            return true;
        } else {
            System.out.println("Serial port not open!");
        }
        return false;
    }

    private boolean checkpassword() {
        char[] a = jPasswordField_pass.getPassword();
        String str = String.valueOf(a);
//        System.out.println("pass:"+str);
        if (str.equals("liuxuan")) {
            return true;
        } else {
            System.out.println("Wrong Password!!,Hint,the developer's name is?");
        }
        return false;
    }

    /**
     * 获取选定的串口
     *
     * @return
     */
    private SerialAddress getserialport() {
        int ibaudrate = Integer.parseInt((String) jComboBox_BaudRate.getSelectedItem());
        String port = (String) jComboBox_ComPort.getSelectedItem();
        portAddress = new SerialAddress(port, ibaudrate, SerialAddress.DataBits.DATABITS_8, SerialAddress.StopBits.BITS_1, SerialAddress.Parity.NONE,
                SerialAddress.FlowControl.NONE);
        return portAddress;
    }
    /**
     * 定义公用串口变量
     */
    SerialAddress portAddress;
    IoHandlerAdapter handler = null;
    RS232Connector receiver = null;
    GUIPrintStream gpstream;
    ZigbeeStatus zigbeestatus;
    Thread th_ss;
    SlowSender slowsender;

    //=============================界面控制===========================================
    public void setVersion(String version) {
        if (version == null) {
            this.jLabel_version.setText("Version:尚未连接");
        }
        this.jLabel_version.setText("Version:" + version);
    }

    public String getBaudRateSet() {
        return (String) this.jComboBox_BaudRateSet.getSelectedItem();
    }

    public void setBaudRateSet(int no) {
        no = no % jComboBox_BaudRateSet.getItemCount();
        this.jComboBox_BaudRateSet.setSelectedIndex(no);
    }

    public void setBaudRateSet(String br) {
        this.jComboBox_BaudRateSet.setSelectedItem(br);
    }

    public void setParity(int no) {
        no = no % jComboBox_ParitySet.getItemCount();
        this.jComboBox_ParitySet.setSelectedIndex(no);
    }

    public void setFlowControl(int no) {
        no = no % jComboBox_FlowcontrolSet.getItemCount();
        this.jComboBox_FlowcontrolSet.setSelectedIndex(no);
    }

    public void setPower(int no) {
        no = no % jComboBox_Power.getItemCount();
        this.jComboBox_Power.setSelectedIndex(no);
    }

    public void setChannel(int no) {
        no = no % jComboBox_Channel.getItemCount();
        this.jComboBox_Channel.setSelectedIndex(no);
    }

    public void setTopology(int no) {
        no = no - 0x61;//61 62 63 对应 mesh 等
        no = no % jComboBox_Topology.getItemCount();
        this.jComboBox_Topology.setSelectedIndex(no);
    }

    public void setEnableIO(int no) {
        no = no % jComboBox_EnableIO.getItemCount();
        this.jComboBox_EnableIO.setSelectedIndex(no);
    }

    public void setNodeType(int no) {
        no = no % jComboBox_NodeType.getItemCount();
        this.jComboBox_NodeType.setSelectedIndex(no);
    }

    public void setBootloader(int no) {
        no = no % jComboBox_Bootloader.getItemCount();
        this.jComboBox_Bootloader.setSelectedIndex(no);
    }

    public int getNodeId_Upper() {
        int currno = Integer.parseInt(jFormattedTextField_NodeId.getText());
        currno = currno & 0xFF00;
        currno = currno / 0x100;
        return currno;
    }

    public int getNodeId_Lower() {
        int currno = Integer.parseInt(jFormattedTextField_NodeId.getText());
        currno = currno & 0xFF;
        return currno;
    }

    public void setNodeId_Upper(int no) {
        //no：一个字节
        no = no & 0xFF;
        int currno = Integer.parseInt(jFormattedTextField_NodeId.getText());
        currno = currno & 0x00FF;
        no = no * 0x100;
        currno = currno + no;
        jFormattedTextField_NodeId.setValue(currno);
    }

    public void setNodeId_Lower(int no) {
        //no：一个字节
        no = no & 0xFF;
        int currno = Integer.parseInt(jFormattedTextField_NodeId.getText());
        currno = currno & 0xFF00;
        currno = currno + no;
        jFormattedTextField_NodeId.setValue(currno);
    }

    public int getNetId_Upper() {
        int currno = Integer.parseInt(jFormattedTextField_NetId.getText());
        currno = currno & 0xFF00;
        currno = currno / 0x100;
        return currno;
    }

    public int getNetId_Lower() {
        int currno = Integer.parseInt(jFormattedTextField_NetId.getText());
        currno = currno & 0xFF;
        return currno;
    }

    public void setNetId_Upper(int no) {
        //no：一个字节
        no = no & 0xFF;
        int currno = Integer.parseInt(jFormattedTextField_NetId.getText());
        currno = currno & 0x00FF;
        no = no * 0x100;
        currno = currno + no;
        jFormattedTextField_NetId.setValue(currno);
    }

    public void setNetId_Lower(int no) {
        //no：一个字节
        no = no & 0xFF;
        int currno = Integer.parseInt(jFormattedTextField_NetId.getText());
        currno = currno & 0xFF00;
        currno = currno + no;
        jFormattedTextField_NetId.setValue(currno);
    }

    public void sendRegisterPacket(ZigbeeSettingsPacket pkt, int regno, int waittime, IoSession session) {
        WriteFuture wf;
        //发送之前记录哪个槽发送
        ZigbeeSettingsPacket.setRegister(pkt.getPacketSlot(), regno, waittime);
        wf = session.write(pkt);// 发送消息
        wf.awaitUninterruptibly();
        try {
            Thread.sleep(80);
        } catch (InterruptedException ex) {
            Logger.getLogger(WEXUtil.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sendRegisterPacketSlow(ZigbeeSettingsPacket pkt, int regno, int waittime, IoSession session) {
        slowsender.addPkt(pkt, regno, waittime);
    }

    public void disableSettings() {
        jButton_comm_write.setEnabled(false);
        jButton_common_read.setEnabled(false);
        jButton_common_write.setEnabled(false);
    }

    public void enableSettings() {
        jButton_comm_write.setEnabled(true);
        jButton_common_read.setEnabled(true);
        jButton_common_write.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UITester.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(UITester.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(UITester.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UITester.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WEXUtil ut = new WEXUtil();
                try {
                    Date today = new Date();
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    Date afterdate = format.parse("2015-08-02");// Try catch省略了
                    if (today.after(afterdate)) {
                        ut.dispose();
                    } else {
                        ut.setVisible(true);
                    }
                } catch (ParseException ex) {
                    log.error(ex.getMessage());
                    // Logger.getLogger(MDIUI.class.getName()).log(Level.SEVERE, null, ex);
                }
//                ut.setVisible(true);
                ut.gpstream = new GUIPrintStream(System.out, ut.jTextArea_output, true);
                System.setOut(ut.gpstream);

                ut.disableSettings();
//                new InfraredSimulator().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_EnterTransMode;
    private javax.swing.JButton jButton_ExitTransMode;
    private javax.swing.JButton jButton_ResetZigbee;
    private javax.swing.JButton jButton_SendText;
    private javax.swing.JButton jButton_TestConnection;
    private javax.swing.JButton jButton_TestRoute;
    private javax.swing.JButton jButton_TestRouteRSSI;
    private javax.swing.JButton jButton_comm_write;
    private javax.swing.JButton jButton_common_read;
    private javax.swing.JButton jButton_common_write;
    private javax.swing.JButton jButton_emptyoutput;
    private javax.swing.JComboBox jComboBox_BaudRate;
    private javax.swing.JComboBox jComboBox_BaudRateSet;
    private javax.swing.JComboBox jComboBox_Bootloader;
    private javax.swing.JComboBox jComboBox_Channel;
    private javax.swing.JComboBox jComboBox_ComPort;
    private javax.swing.JComboBox jComboBox_EnableIO;
    private javax.swing.JComboBox jComboBox_FlowcontrolSet;
    private javax.swing.JComboBox jComboBox_NodeType;
    private javax.swing.JComboBox jComboBox_ParitySet;
    private javax.swing.JComboBox jComboBox_Power;
    private javax.swing.JComboBox jComboBox_Topology;
    private javax.swing.JFormattedTextField jFormattedTextField_NetId;
    private javax.swing.JFormattedTextField jFormattedTextField_NodeId;
    private javax.swing.JFormattedTextField jFormattedTextField_SendTextDest;
    private javax.swing.JFormattedTextField jFormattedTextField_TestRoute;
    private javax.swing.JFormattedTextField jFormattedTextField_TransModeAddr;
    private javax.swing.JLabel jLabel_BaudRate;
    private javax.swing.JLabel jLabel_BaudRateSet;
    private javax.swing.JLabel jLabel_Bootloader;
    private javax.swing.JLabel jLabel_Channel;
    private javax.swing.JLabel jLabel_ComPort;
    private javax.swing.JLabel jLabel_EnableIO;
    private javax.swing.JLabel jLabel_FlowcontrolSet;
    private javax.swing.JLabel jLabel_NetId;
    private javax.swing.JLabel jLabel_NodeId;
    private javax.swing.JLabel jLabel_NodeType;
    private javax.swing.JLabel jLabel_ParitySet;
    private javax.swing.JLabel jLabel_Power;
    private javax.swing.JLabel jLabel_SendText;
    private javax.swing.JLabel jLabel_TestRoute;
    private javax.swing.JLabel jLabel_Topology;
    private javax.swing.JLabel jLabel_TransModeAddr;
    private javax.swing.JLabel jLabel_pass;
    private javax.swing.JLabel jLabel_version;
    private javax.swing.JPanel jPanel_CommSetting;
    private javax.swing.JPanel jPanel_advance;
    private javax.swing.JPanel jPanel_common;
    private javax.swing.JPanel jPanel_comportset;
    private javax.swing.JPanel jPanel_normal;
    private javax.swing.JPanel jPanel_output;
    private javax.swing.JPasswordField jPasswordField_pass;
    private javax.swing.JScrollPane jScrollPane_output;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea_output;
    private javax.swing.JTextField jTextField_SendText;
    private javax.swing.JToggleButton jToggleButton_startStopAction;
    // End of variables declaration//GEN-END:variables

    public void initReceiver(IoHandlerAdapter _handler, ProtocolCodecFactory _pcf) {
        portAddress = getserialport();
        if (handler == null) {
            handler = _handler;
        }
        if (receiver != null) {
            receiver.endListen();
        }
        receiver = RS232Connector.getInstance(handler, portAddress);
        receiver.addFilter("logger", new LoggingFilter());
        receiver.addFilter("codec", new ProtocolCodecFilter(_pcf));    // 设置编码过滤器
    }

    public class SlowSender implements Runnable {

        private Queue<ZigbeeSettingsPacket> queue;
        IoSession session;
        int speed = 300;
        WriteFuture wf;
        boolean endflag = false;

        public SlowSender(IoSession _session) {
            this.queue = new LinkedList<ZigbeeSettingsPacket>();
            session = _session;
        }

        @Override
        public void run() {
            while ((!endflag) || isWorking()) {
                doSend();
            }
        }

        public void endthread() {
            endflag = true;
//            System.out.println("lasttosend" + queue.size());
        }

        public void setSpeed(int k) {
            speed = k;
        }

        public boolean isWorking() {
            return !queue.isEmpty();
        }

        public int lastToSend() {
            return queue.size();
        }

        private void doSend() {
//            if (queue.isEmpty()) {
//                //队列空则跳过执行
////                System.out.println(queue.size());
//            } else {
//                System.out.println(queue.size());

            ZigbeeSettingsPacket pkt = queue.poll();
            if (pkt != null && session != null) {
//                System.out.println(queue.size());

                wf = session.write(pkt);// 发送消息
                wf.awaitUninterruptibly();

                if (pkt.isRestartFlag()) {
                    pkt.setRestartFlag(false);
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(WEXUtil.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jToggleButton_startStopAction.doClick();
                    System.out.println("BaudRate changed, please reopen the serial port");
                }
            }
//            }
            try {
                Thread.sleep(speed);
            } catch (InterruptedException ex) {
                Logger.getLogger(WEXUtil.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        private boolean addPkt(ZigbeeSettingsPacket pkt, int regno, int waittime) {
            ZigbeeSettingsPacket.setRegister(pkt.getPacketSlot(), regno, queue.size() * (100 + speed) + waittime);
//            ZigbeeSettingsPacket.setRegister(pkt.getPacketSlot(), regno, queue.size()*100+waittime);
            boolean b = queue.offer(pkt);
            return b;
        }
    }
}
